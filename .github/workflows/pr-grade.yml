name: PR Auto Grading

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  grade:
    name: Grade PR
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout student code (PR head)
        uses: actions/checkout@v4
        with:
          # 포크의 PR 헤드 커밋만 체크아웃 (신뢰 X, 실행 금지)
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1
          path: student

      - name: Checkout trusted upstream (runner/scripts)
        uses: actions/checkout@v4
        with:
          # 이 저장소(신뢰)에서 러너 스크립트 사용
          repository: ${{ github.repository }}
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 1
          path: upstream

      - name: Detect week from PR title or repo
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          title="${{ github.event.pull_request.title }}"
          week="$(echo "$title" | grep -oE '\[week[0-9]+\]' | tr -d '[]' || true)"
          if [[ -z "${week}" ]]; then
            # student/weeks 아래의 week* 디렉터리 중 사전순/최신 선택
            if compgen -G "student/weeks/week[0-9]*" > /dev/null; then
              week="$(ls -1d student/weeks/week[0-9]* | sed 's#.*/##' | sort | tail -n1)"
            fi
          fi
          if [[ -z "${week}" || ! -d "student/weeks/${week}" ]]; then
            echo "::error::주차(weekN) 판단 실패. PR 제목에 [weekN]을 포함하세요."
            exit 1
          fi
          echo "week=${week}" | tee -a "$GITHUB_OUTPUT"

      - name: Build (compile C sources)
        id: build
        shell: bash
        run: |
          set -euo pipefail
          week="${{ steps.detect.outputs.week }}"
          src_dir="student/weeks/${week}/src"
          bin="student/weeks/${week}/prog"
          inc="student/weeks/${week}/include"
          if ! compgen -G "${src_dir}/*.c" > /dev/null; then
            echo "::error::${src_dir} 에 .c 파일이 없습니다."
            exit 1
          fi
          # 빌드 (학생 Makefile 사용하지 않음)
          if [[ -d "${inc}" ]]; then
            gcc -Wall -Wextra -std=c17 -I "${inc}" "${src_dir}"/*.c -o "${bin}"
          else
            gcc -Wall -Wextra -std=c17 "${src_dir}"/*.c -o "${bin}"
          fi
          echo "bin=${bin}" >> "$GITHUB_OUTPUT"

      - name: Run tests with trusted runner
        id: run
        shell: bash
        continue-on-error: true   # 오답이어도 잡 실패로 간주하지 않음
        env:
          VERBOSE: "0"            # 학생에게는 요약만
          STRICT: "1"             # 내부 판단은 실패/성공 구분 (다음 스텝에서 처리)
        run: |
          set -euo pipefail
          week="${{ steps.detect.outputs.week }}"
          # 신뢰 러너 스크립트 사용 (upstream)
          runner="$GITHUB_WORKSPACE/upstream/weeks/run_tests.sh"
          chmod +x "$runner"
          pushd "student/weeks/${week}" >/dev/null
          # STRICT=1: 러너 내부적으로 실패/성공 코드 분기, 단 이 스텝은 continue-on-error
          STRICT="${STRICT}" VERBOSE="${VERBOSE}" bash "$runner" | tee "$GITHUB_WORKSPACE/result.txt"
          popd >/dev/null || true

      - name: Parse result
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "result.txt" ]]; then
            echo "::error::채점 결과(result.txt)를 찾을 수 없습니다."
            exit 1
          fi
          # 케이스 라인과 최종 요약만 추출
          cases="$(grep -E '^CASE ' result.txt || true)"
          summary="$(grep -E '^RESULT:' result.txt | tail -n1 || true)"
          # 점수 추출(형태: RESULT: PASS (X/Y))
          score="$(echo "$summary" | grep -oE '[0-9]+/[0-9]+' || true)"
          # 상태
          status="UNKNOWN"
          echo "$summary" | grep -q 'RESULT: PASS' && status="PASS" || status="FAIL"
          {
            echo "cases<<EOF"
            echo "${cases}"
            echo "EOF"
            echo "summary=${summary}"
            echo "score=${score:-0/0}"
            echo "status=${status}"
          } >> "$GITHUB_OUTPUT"

      - name: Post sticky comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          message: |
            ### 자동 채점 결과
            - 주차: **${{ steps.detect.outputs.week }}**
            - 상태: **${{ steps.parse.outputs.status }}**
            - 점수: **${{ steps.parse.outputs.score }}**

            **케이스별 결과**
            ```
            ${{ steps.parse.outputs.cases }}
            ```

            _최종 요약_
            ```
            ${{ steps.parse.outputs.summary }}
            ```

      # 선택: 실패 라벨(원하면 사용)
      # - name: Label PR on failure
      #   if: ${{ steps.parse.outputs.status == 'FAIL' }}
      #   uses: actions-ecosystem/action-add-labels@v1
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     labels: |
      #       grading:fail
